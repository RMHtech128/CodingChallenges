using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;


/// https://dotnetfiddle.net/OZdImg
/// keeping classes and struct to one file for ease of using https://dotnetfiddle.net/OZdImg
namespace OpenWeatherMap
{
    public class Program
    {
        public static void Main()
        {
            try
            {
                WeatherGetter wGb = new WeatherGetter();
                wGb.WeatherGet();
            }
            catch (Exception ex)
            {   // IMHO exceptions are not error handling. For more complex systems I design processing state machines and handle error codes
                // within that or in an Error Handling Class.
                Console.WriteLine(@"Error: " + ex.Message);
            }
        }

        /// <summary>
        /// Declare a "Get Weather forecast" Class- This is a base class and entry point for the app.
        /// </summary>
        class WeatherGetter
        {
            /// <summary>
            /// Example get API call: 
            /// api.openweathermap.org/data/2.5/forecast/daily? q = { city name },{country code}&cnt={cnt}
            /// test data: 
            /// api.openweathermap.org/data/2.5/forecast/daily?q=Cheyenne,US&cnt=5*/
            /// </summary>
            public void WeatherGet()
            {
                try
                {
                    CitiesData cities = new CitiesData();
                    // get city data from database 
                    foreach (var city in cities.arrayCities)
                    {
                        //strip off the state. the "free" "demo api" accessed for weathermap.org doesn't use a state - this is a problem for any real production
                        // if the comma doesn't exist then handle the error.
                        Int32 idx = city.IndexOf(",");
                        if (idx != -1)
                        {
                            string forecast = GetData(city.Substring(0, idx + 1) + "us"); // substring to the comma and keep the comma - then append the country code
                                                                                          // parse the JSON
                            WeatherRootObject wFj = ParseJsonObject(forecast);
                            // write 5 days worth.
                            AnalyzeAndWriteWeatherToConsole(wFj);
                        }
                        else
                            Console.WriteLine("Error: City not found in data source.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(@"Error: " + ex.Message);
                }                
            }



            /// <summary>
            /// Honolulu, HI (01234)
            ///
            ///Date Avg Temp(F)
            ///----------------------------
            ///3/8/2017* 48.23 F
            ///3/9/2017  44.23 F
            ///3/10/2017  45.23 F
            ///3/11/2017  46.23 F
            ///3/12/2017* 47.23 F
            /// </summary>
            /// <param name = "weatherObjFromJson"></param>
            private void AnalyzeAndWriteWeatherToConsole(WeatherRootObject weatherObjFromJson)
            {
                try
                {
                    // this free API from weathermap doesn't have states. They have country codes.
                    // match the city to my list of cities, this does state lookup. not ideal. the API needs to be certain of the location
                    // another way to do this is by verifying the gPS coordinates
                    string cityState = string.Empty;
                    CitiesData ctyClass = new CitiesData();
                    foreach (var iterateCityState in ctyClass.arrayCities)
                    {
                        if (iterateCityState.Contains(weatherObjFromJson.city.name)) // the shorter name is in the wFJ class. swapped variables.
                        {
                            cityState = iterateCityState;
                            break;
                        }
                    }

                    Console.WriteLine(cityState);
                    Console.Write("\n");
                    Console.WriteLine("Date Avg Temp(F)");
                    Console.WriteLine("----------------------------");
                    PrecipitationPredictor Precip = new PrecipitationPredictor();
                    if (weatherObjFromJson.list.Count >= ConfigurationSettings.max3HrPeriodsPerDay ) // sanity check: at least one day of data
                    {
                        UInt16 idxOf3Hours = 0;
                        // use 40 records, 5 days at 8 hours per day, 3 hours between records. Subtract off one full day of 8.
                        for (int i = 0; i < (weatherObjFromJson.list.Count - ConfigurationSettings.max3HrPeriodsPerDay); i += idxOf3Hours) // appreantly we never hit that half-day. but still account for it.
                        {
                            // there's 8 qty 3hour period in a day of data 
                            // sum the days data for the avergage.
                            // at the same time count the number of heavy weather 3 hour periods. Any count about 0 is "precipitation"
                            // this first day of data starts at the hour that you run a "get" from the API.
                            //Average that day until midnight, then each of the 8 3hour periods after that. MVP
                            CultureInfo culture = new CultureInfo("en-US");
                            string currentDate = Convert.ToDateTime(weatherObjFromJson.list[i].dt_txt, culture).ToShortDateString();
                            string tempDate;
                            // calc avergae temp;
                            idxOf3Hours = 0;
                            int intPrecip = 0;
                            double totalTemperature = 0;
                            for (; idxOf3Hours < ConfigurationSettings.max3HrPeriodsPerDay; idxOf3Hours++) // 8-3 hours periods.
                            {
                                // if the date changes then break out.
                                tempDate = Convert.ToDateTime(weatherObjFromJson.list[i + idxOf3Hours].dt_txt, culture).ToShortDateString();
                                if (currentDate != tempDate)
                                    break;
                                
                                // get total temps for the day
                                totalTemperature += weatherObjFromJson.list[i + idxOf3Hours].main.temp;
                                
                                // Get all heavy weather predictors
                                foreach (var wet in weatherObjFromJson.list[i + idxOf3Hours].weather)
                                {
                                    intPrecip += (Precip.GetPotentialOfRain(wet.id) == true ? 1 : 0);
                                    // one is enough.
                                    if (intPrecip != 0)
                                        break;
                                }
                            }

                            double AvgFahrTemperature = totalTemperature / idxOf3Hours;
                            Console.WriteLine(currentDate + (intPrecip != 0 ? "* " : "  ") + AvgFahrTemperature.ToString("0.00") + " F");
                        }
                    }
                    Console.Write("\n");
                }
                catch (Exception ex)
                {
                    Console.WriteLine(@"Error: " + ex.Message);
                }
            }

            /// <summary>
            /// Parse the JSON string into class objects
            /// </summary>
            /// <param name="forecast"></param>
            /// <returns></returns>
            private WeatherRootObject ParseJsonObject(string forecast)
            {
                try
                {
                    // Make a stream to read from.
                    MemoryStream stream = new MemoryStream();
                    StreamWriter writer = new StreamWriter(stream);
                    writer.Write(forecast);
                    writer.Flush();
                    stream.Position = 0;
                    // Deserialize from the stream.
                    DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(WeatherRootObject));
                    WeatherRootObject wRo = JsonConvert.DeserializeObject<WeatherRootObject>(forecast);
                    //WeatherRootObject wFj = (WeatherRootObject)serializer.ReadObject(stream);
                    // Return the result.
                    return wRo;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(@"Error: " + ex.Message);
                }
                return new WeatherRootObject();
            }

            /// <summary>
            /// GetData from the API.
            /// </summary>
            /// <param name="cityNameCommaCountry"></param>
            /// <returns></returns>
            public string GetData(string cityNameCommaCountry)
            {
                try
                {
                    string URL = "http://api.openweathermap.org"; //  + "&APPID=d6c30ba9202aede4574c8842cfe8ec4a";
                    string urlParameters = "/data/2.5/forecast?q=" + cityNameCommaCountry + "&units=imperial&APPID=" + ConfigurationSettings.ApiKey;

                    HttpClient client = new HttpClient();
                    client.BaseAddress = new Uri(URL);
                    // accept header
                    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                    // Get response
                    string response = client.GetStringAsync(urlParameters).Result; // wait for a response or timeout. wait here until response or a timeout.
                    if (response == null && response == string.Empty) 
                    {
                        Console.WriteLine("response is null or empty failed."); 
                    }

                    client.Dispose();
                    return response;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(@"Error: " + ex.Message);
                }
                return string.Empty;
            }
        }

        /// <summary>
        /// Cities Data is a generic class that can be used for a unit test, or dev debugging.
        /// Normally this would be input from a customer text field, checkbox, a url parameter or a database Table query
        /// </summary>
        public class CitiesData
        {
            public string[] arrayCities = new string[] { "Marlboro, MA", "San Diego, CA", "Cheyenne, WY", "Anchorage, AK", "Austin, TX", "Orlando, FL", "Seattle, WA", "Cleveland, OH", "Portland, ME", "Honolulu, HI" };
        }

        /// <summary>
        /// This class scans the data for weather codes and returns a bool for potenital of rain or snow.
        /// </summary>
        public class PrecipitationPredictor
        {
            /// <summary>
            /// loop through all weather conditions until at least one precipitation code is found for the day during any 3 hour period.
            /// </summary>
            /// <param name="weatherId"></param>
            /// <returns></returns>
            public bool GetPotentialOfRain(int weatherId)
            {
                try
                {
                    if (weatherId != 0)
                    {
                        string firstdigit = weatherId.ToString().Substring(0, 1);
                        foreach (var weather in ConfigurationSettings.arrayHeavyWeather)
                        {
                            if (firstdigit == weather.Substring(0, 1))
                            {
                                return true; // we have heavy weather. Leave now.
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error in weatherId: " + ex);
                }
                return false;
            }            
        }

        /// <summary>
        /// These are configuration settings that might be stored in a table or acquired from a user input.
        /// </summary>
        public static class ConfigurationSettings
        {
            // Forecast data contains 8 periods of 3 hours each - indexOf3Hours will interate 0 -> 8
            public static int max3HrPeriodsPerDay = 8;
            public static int NumDaysToAcquireData = 5;
     
            /// <summary>
            /// Fixed value for api key that would normally be acquired during authentication
            /// </summary>
            public static string ApiKey
            {
                get { return "d6c30ba9202aede4574c8842cfe8ec4a"; }
                internal set {;}
            }
            /// <summary>
            /// Heavy weather indicator codes. non-precipitation code are ommitted, returning only possible rain or snow predictions.
            /// putting this in configuration class for potential future expansion
            /// </summary>
            public static string[] arrayHeavyWeather = new string[]
            {
                "2xx: Thunderstorm", //precipitation
                "3xx: Drizzle", //precipitation
                "5xx: Rain", //precipitation
                "6xx: Snow", //precipitation
            };
        }


        #region JsonDataContract
        //[DataContract]
        public class WeatherRootObject
        {
            //[DataMember]
            public string cod
            {
                get;
                set;
            }

            //[DataMember]
            public int message
            {
                get;
                set;
            }

            //[DataMember]
            public int cnt
            {
                get;
                set;
            }

            //[DataMember]
            public List<List> list
            {
                get;
                set;
            }

            //[DataMember]
            public City city
            {
                get;
                set;
            }
        }

        //[DataContract]
        public class Main1
        {
            //[DataMember]
            public double temp
            {
                get;
                set;
            }

            //[DataMember]
            public double feels_like
            {
                get;
                set;
            }

            //[DataMember]
            public double temp_min
            {
                get;
                set;
            }

            //[DataMember]
            public double temp_max
            {
                get;
                set;
            }

            //[DataMember]
            public int pressure
            {
                get;
                set;
            }

            //[DataMember]
            public int sea_level
            {
                get;
                set;
            }

            //[DataMember]
            public int grnd_level
            {
                get;
                set;
            }

            //[DataMember]
            public int humidity
            {
                get;
                set;
            }

            //[DataMember]
            public double temp_kf
            {
                get;
                set;
            }
        }

        //[DataContract]
        public class Weather
        {
            //[DataMember]
            public int id
            {
                get;
                set;
            }

            //[DataMember]
            public string main
            {
                get;
                set;
            }

            //[DataMember]
            public string description
            {
                get;
                set;
            }

            //[DataMember]
            public string icon
            {
                get;
                set;
            }
        }

        //[DataContract]
        public class Clouds
        {
            //[DataMember]
            public int all
            {
                get;
                set;
            }
        }

        //[DataContract]
        public class Wind
        {
            //[DataMember]
            public double speed
            {
                get;
                set;
            }

            //[DataMember]
            public int deg
            {
                get;
                set;
            }
        }

        //[DataContract]
        public class Sys
        {
            //[DataMember]
            public string pod
            {
                get;
                set;
            }
        }

        //[DataContract]
        public class Snow
        {
            //[DataMember]
            public double __invalid_name__3h
            {
                get;
                set;
            }
        }

        //[DataContract]
        public class List
        {
            //[DataMember]
            public int dt
            {
                get;
                set;
            }

            //[DataMember]
            public Main1 main
            {
                get;
                set;
            }

            //[DataMember]
            public List<Weather> weather
            {
                get;
                set;
            }

            //[DataMember]
            public Clouds clouds
            {
                get;
                set;
            }

            //[DataMember]
            public Wind wind
            {
                get;
                set;
            }

            //[DataMember]
            public Sys sys
            {
                get;
                set;
            }

            //[DataMember]
            public string dt_txt
            {
                get;
                set;
            }

            //[DataMember]
            public Snow snow
            {
                get;
                set;
            }
        }

        //[DataContract]
        public class Coord
        {
            //[DataMember]
            public double lat
            {
                get;
                set;
            }

            //[DataMember]
            public double lon
            {
                get;
                set;
            }
        }

        //[DataContract]
        public class City
        {
            //[DataMember]
            public int id
            {
                get;
                set;
            }

            //[DataMember]
            public string name
            {
                get;
                set;
            }

            //[DataMember]
            public Coord coord
            {
                get;
                set;
            }

            //[DataMember]
            public string country
            {
                get;
                set;
            }

            //[DataMember]
            public int population
            {
                get;
                set;
            }

            //[DataMember]
            public int timezone
            {
                get;
                set;
            }

            //[DataMember]
            public int sunrise
            {
                get;
                set;
            }

            //[DataMember]
            public int sunset
            {
                get;
                set;
            }
        }
#endregion
    }
}
